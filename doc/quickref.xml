<?xml version="1.0" encoding="iso-8859-1"?>

<!--
$Id$
-->

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/committees/docbook/xml/4.1.2/docbookx.dtd">

<article lang="en">

  <title>Webshell Reference</title>
  <articleinfo>
    <releaseinfo>
      $Id$
    </releaseinfo>
  </articleinfo>
  <section id="intro">
    <title>Introduction</title>
    <section id="general_remarks">
      <title>General remarks</title>
      <para>
	Webshell 3.5 embeds a Tcl 8.3 interpreter, and all Tcl 8.3
	commands are available.
      </para>
      <para>
	Typically, Webshell commands have the following syntax:
	<cmdsynopsis>
	  <command>web::acommand</command>
	  <arg choice="opt">options</arg>
	  <arg choice="opt">subcommands</arg>
	  <arg choice="opt">arguments</arg>
	</cmdsynopsis>
	Options start with a dash
	(&quot;-&quot;). As usual, dash-dash (&quot;--&quot;) indicates
	the &quot;end-of-options&quot;. Thus, <emphasis>web::acommand
	  -o1 a1 -- -o2</emphasis> takes &quot;-o2&quot; as the first
	argument.
      </para>
      <para>
	In difference to the normal &quot;set&quot; behaviour of tcl and
	Webshell, configuration commands of Webshell normally return the
	previously used value when a new value is set.
      </para>
      <para>
	In addition to the examples given here you might find <ulink
	  url="http://websh.com/examples.html">http://websh.com/examples.html</ulink>
	a usefull source of information.
      </para>
    </section>
    <section id="about">
      <title>About this document</title>
      <para>
	The original version of this document can always be found at
	<ulink url="http://tcl.apache.org/websh/">http://tcl.apache.org/websh</ulink>.
      </para>
      <note>
	<para>
	  We try to keep this quick reference up-to-date and hope that
	  it will be useful. We do not guarantee that it is suitable
	  for any particular purpose whatsoever. The authors accept no
	  liability in respect to this information or its use.
	</para>
      </note>
    </section>
  </section>
  <section id="configuration">
    <title>Configuration</title>
    <section id="web::config">
      <title>web::config</title>
      <cmdsynopsis>
	<command>web::config</command>
	<arg>key</arg>
	<arg choice="opt">value</arg>
      </cmdsynopsis>
      <!--
      <emphasis>web::config</emphasis> &lt;key&gt; ?&lt;value&gt;?</para><para>
      &lt;key&gt;: <emphasis>uploadfilesize</emphasis>, <emphasis>cmdparam</emphasis>, <emphasis>timeparam</emphasis>,
      <emphasis>logsubst</emphasis>, <emphasis>putxmarkup</emphasis>, <emphasis>version</emphasis>, <emphasis>copyright</emphasis>,
      <emphasis>encryptchain</emphasis>, and <emphasis>decryptchain</emphasis></para><para>
      If &lt;value&gt; is ommitted, the current value of &lt;key&gt; is returned.
      -->

      <variablelist>
	<varlistentry>
	  <term><option>uploadfilesize</option> <optional><option>size</option></optional></term>
	  <listitem>
	    <para>
	      Sets the maximum number of bytes allowed to be uploaded.
	      Default: 0.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>cmdparam</option> <optional><option>name</option></optional></term>
	  <listitem>
	    <para>
	      Name of the parameter to store reference to a web::command command
	      in the URL. Default: &quot;cmd&quot;.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>timeparam</option> <optional><option>name</option></optional></term>
	  <listitem>
	    <para>
	      Name of the parameter to store reference to the timestamp
	      in the URL. Default: &quot;t&quot;.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>logsubst</option> <optional><option>boolean</option></optional></term>
	  <listitem>
	    <para>
	      Turns substitution of log messages on or off. Default: on.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>putxmarkup</option> <optional><option>brace|tag</option></optional></term>
	  <listitem>
	    <para>
	      Sets the markup characters for sections to be eval'd in web::putx
	      and web::putxfile commands to either curly braces ({ ... }) or
	      special tags (&lt;% ... %&gt;). Please note that when using the tags &lt;%%&gt;,
	      they cannot be nested. Default: brace.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>version</option></term>
	  <listitem>
	    <para>
	      Returns the version info string
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>copyright</option></term>
	  <listitem>
	    <para>
	      Returns a copyright message string
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>encryptchain</option> <option>list</option></term>
	  <listitem>
	    <para>
	      defines which commands should be tried, in sequence, to encrypt
	      a message. Default: &quot;web::encryptd&quot;
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>decryptchain</option> <option>list</option></term>
	  <listitem>
	    <para>
	      defines which commands should be tried, in sequence, to decrypt
	      a message. Default: &quot;web::decryptd&quot;
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>

    </section>
    <section id="Examples0">
      <title>Examples</title>
      <para>

	<programlisting>
	  % web::config decryptchain
	  web::encryptd
	  %
	</programlisting>

      </para>
    </section>
  </section>
  <section id="command_dispatching_and_session_management">
    <title>Command dispatching and session management</title>
    <para>
      Webshell provides a command dispatching mechanism to produce,
      for example, different HTML pages within one application. The
      name of the command to be used is encoded in the querystring
      (see <command>web::cmdurl</command> for details on
      how to produce such querystrings).  Command dispatching is
      initiated with the command <command>web::dispatch</command>.
      Commands are defined with <command>web::command</command>.
    </para>
    <section id="web::command">
      <title>web::command</title>
      <para>
	Syntax:
	<cmdsynopsis>
	  <command>web::command</command>
	  <arg choice="opt">cmdName</arg>
	  <arg>cmdBody</arg>
	</cmdsynopsis>

	Registers <option>cmdBody</option> as
	<option>cmdName</option>. If <option>cmdName</option> is
	omitted, "default" is used.

      </para>
    </section>
    <section id="web::getcommand">
      <title>web::getcommand</title>
      <para>

	Syntax:
	<cmdsynopsis>
	  <command>web::getcommand</command>
	  <arg choice="opt">cmdName</arg>
	</cmdsynopsis>

	Retrieves the body of the command <option>commandName</option>
	or of the command &quot;default&quot; if
	<option>cmdName</option> is omitted.

      </para>
    </section>
    <section id="web::cmdurl">
      <title>web::cmdurl</title>
      <para>

	Syntax:
	<cmdsynopsis>
	  <command>web::cmdurl</command>
	  <arg choice="opt">options</arg>
	  <arg>cmdName</arg>
	  <arg choice="opt">key-value-list</arg>
	</cmdsynopsis>

	<cmdsynopsis>
	  <command>web::cmdurl</command>
	  <arg choice="opt">options</arg>
	  <arg>cmdName</arg>
	  <arg choice="opt">k1 v1 ... kN vN</arg>
	</cmdsynopsis>
      </para>
      <para>
	Options are: <option>-notimestamp</option>, and
	<option>-urlformat</option>
      </para>
      <para>
	Generate URLs including querystring. By default, URLs are
	self-referencing, but the exact output is subject to
	configuration. The querystring is encrypted, using the
	encryption method specified by configuration (see
	<command>web::config</command>). If <option>cmdName</option>
	is &quot;&quot;, no command parameter is produced in the query
	string.

	<variablelist>
	  <varlistentry>
	    <term><option>-notimestamp</option></term>
	    <listitem>
	      <para>
		do not add a timestamp to the URL
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-urlformat</option> <option>list</option></term>
	    <listitem>
	      <para>
		specify what items will be used to format just this
		URL.  Default is: <command>{scriptname pathinfo
		  querystring}</command>
	      </para>
	      <para>
		Use <command>web::cmdurlcfg</command> to define the
		url format for all URLs produced by
		<command>web::cmdurl</command> in one
		request.
	      </para>
	      <para>
		<variablelist>
		  <varlistentry>
		    <term><option>scheme</option></term>
		    <listitem>
		      <para>
			include the protocol, only &quot;http&quot;
			and &quot;https&quot; are currently supported
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><option>host</option></term>
		    <listitem>
		      <para>
			include the host name,
			e.g. &quot;websh.com&quot;
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><option>port</option></term>
		    <listitem>
		      <para>
			include the port,
			e.g. &quot;80&quot;</para><para> Trying to set
			this item without host will throw an error
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><option>scriptname</option></term>
		    <listitem>
		      <para>
			include scriptname, e.g. &quot;/cgi-bin/orderbooks&quot;
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><option>pathinfo</option></term>
		    <listitem>
		      <para>
			include pathinfo, e.g. &quot;/merchants/shop1&quot;
		      </para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><option>querystring</option></term>
		    <listitem>
		      <para>
			include the querystring, e.g. &quot;select=download&quot;
		      </para>
		    </listitem>
		  </varlistentry>
		</variablelist>
		<note>
		  <para>
		    Note that there are two more commands that control
		    the output of <command>web::cmdurl</command>:
		    <command>web::config</command> <option>cmdparam</option> and
		    <command>web::config</command> <option>timeparam</option>.
		  </para>
		</note>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </section>
    <section id="Examples2">
      <title>Examples</title>
      <para>

	<programlisting>
	  % web::cmdurl -notimestamp -urlformat [list scheme host scriptname pathinfo querystring] &quot;test&quot;
	  http://websh.com/bin/returnmail/member?XDZuRD2rnsfHjFH
	  %
	</programlisting>

      </para>
    </section>
    <section id="web::cmdurlcfg">
      <title>web::cmdurlcfg</title>
      <para>

	Syntax:
	<cmdsynopsis>
	  <command>web::cmdurlcfg</command>
	  <arg choice="opt">options</arg>
	  <arg choice="opt">key</arg>
	  <arg choice="opt">value</arg>
	</cmdsynopsis>
      </para>
      <para>
	Command options are exactly like those of
	<command>web::param</command>.
      </para>
      <para>
	<command>web::cmdurlcfg</command> <option>option</option>
	<optional><option>value</option></optional>
      </para>
      <para>
	Options are <option>-scheme</option>,
	<option>-host</option>, <option>-port</option>,
	<option>-scriptname</option>,
	<option>-pathinfo</option>,
	<option>-querystring</option>,
	<option>-urlformat</option></para><para> If
	<option>value</option> is omitted, the current value is
	returned.  Otherwise, the <option>value</option> is stored.

	Configuration for web::cmdurl.  This command serves two purposes:
	<orderedlist>
	  <listitem><para>management of static parameters</para></listitem>
	  <listitem><para>configuration for <command>web::cmdurl</command></para></listitem>
	</orderedlist>
	By "static parameters", we mean those which are set for every
	page, instead of set on a per-page basis.
      </para>
    </section>
    <section id="management_of_static_parameters">
      <title>Management of static parameters</title>
      <para>

	In order to set, retrieve, append or unset static parameters,
	use the syntax of the <command>web::param</command> command,
	for example:
	<variablelist>
	  <varlistentry>
	    <term><command>web::cmdurlcfg</command> -set
	      <option>key</option> <option>value</option></term>
	    <listitem>
	      <para>
		add the static parameter <option>key</option>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::cmdurlcfg</command></term>
	    <listitem>
	      <para>
		returns a list of all known static parameters
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

      </para>
      <para>
	<emphasis>Important</emphasis>: <command>web::cmdurl</command>
	compares every key from the static parameters (see
	<command>web::cmdurlcfg</command>) against the keys from the
	command line. The static parameter is only used if there is no
	parameter given on the command line.
      </para>
    </section>
    <section id="configuration_for_web_cmdurl">
      <title>Configuration for <command>web::cmdurl</command></title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term><option>-protocol</option> <optional><option>value</option></optional></term>
	    <listitem>
	      <para>
		protocol to be used. Default: http.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-servername</option> <optional><option>value</option></optional></term>
	    <listitem>
	      <para>
		server name to be used. Default: taken from request.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-port</option></term>
	    <listitem>
	      <para>
		port number to be used. Default: 80.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-scriptname</option></term>
	    <listitem>
	      <para>
		name of CGI executable. Default: taken from request.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-pathinfo</option></term>
	    <listitem>
	      <para>
		path info (path after scriptname). Default: taken from request.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-urlformat</option> <option>list</option></term>
	    <listitem>
	      <para>
		changes the urlformat permanently. See <command>web::cmdurl </command>for the
		description of this option
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	In all cases, &quot;web::cmdurlcfg -option <option>value</option>&quot; sets the value of
	the given option and returns the value that was used before the change,
	while &quot;web::cmdurlcfg -option&quot; returns the current value.  If no value
	has been set using web::cmdurlcfg, but is requested for the URL
	generation, the value from the request will be used.  This value,
	however, can not be retrieved using web::cmdurlcfg.

      </para>
      <para>
	Note that setting a value to an empty string amounts to
	<command>unset</command>.

	<emphasis>Note also</emphasis>: web::cmdurl compares every key
	from the static parameters see --&gt;(web::cmdurlcfg) against
	the keys from the command line. The static parameter is only
	used if there is no such parameter on the command line.

      </para>
    </section>
    <section id="Examples3">
      <title>Examples</title>
      <para>
	<programlisting>
	  % web::cmdurl &quot;&quot;
	  ?XDqPtk34XvyPh41gUBo
	  % web::cmdurlcfg -scriptname bin/test_script
	  % web::cmdurl &quot;&quot;
	  bin/test_script?XDqPtk34XvyPh41gUBo
	  % web::cmdurlcfg -scriptname &quot;&quot;
	  % web::cmdurl &quot;&quot;
	  ?XDqPtk34XvyPh41gUBo
	  %
	</programlisting>

      </para>
    </section>
    <section id="web::dispatch">
      <title>web::dispatch</title>
      <para>

	Syntax:
	<cmdsynopsis>
	  <command>web::dispatch</command>
	  <arg choice="opt">options</arg>
	</cmdsynopsis>

	Options are: <option>-cmd</option>,
	<option>-querystring</option>, <option>-postdata</option>,
	<option>-track</option> and <option>-hook</option>

	Parse information and call a command.

	<variablelist>
	  <varlistentry>
	    <term><option>-cmd</option> <option>cmdName</option></term>
	    <listitem>
	      <para>
		switch into command <option>cmdName</option>. If
		<option>cmdName</option> is an empty string, no
		command is called. By default,
		<option>cmdName</option> is taken from the
		querystring.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-querystring</option> <option>string</option></term>
	    <listitem>
	      <para>
		parse <option>string</option> as querystring. If
		<option>string</option> is an empty string,
		querystring parsing is turned off. By default,
		querystring is taken from the request data (CGI
		environment or apache module request object).
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-postdata</option> <option>string</option>
	      <optional><option>content_type</option></optional></term>
	    <listitem>
	      <para>
		parse <option>string</option> as POST data input with
		type <option>content_type</option>.
		<option>content_type</option> can be <literal
		  remap="tt">application/x-www-form-urlencoded</literal>
		or <literal remap="tt">multipart/form-data;
		  boundary=xxx</literal>. In the second case,
		<option>content-type</option> must specify the
		boundary as well. By default, POST data is taken from
		the request data.</para><para> If
		<option>string</option> is an empty string, postdata
		parsing is turned off.</para><para> Default for
		<option>content_type</option> is
		&quot;application/x-www-form-urlencoded&quot;
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>
	      <option>-postdata</option> <option>channelName</option>
	      <option>content_length</option>
	      <option>content_type</option>
	    </term>
	    <listitem>
	      <para>
		As above, but reads the POST data from channel
		<option>channelName</option>.
	      </para>
	      <para>
		Use the keyword <literal remap="tt">end</literal> for
		<option>content_length</option> to indicate that Webshell
		should read all content.</para><para> Examples for
		<option>content_type</option> include:
		<itemizedlist>
		  <listitem><para><literal remap="tt">multipart/form-data; boundary=xxxx</literal></para></listitem>
		  <listitem><para><literal remap="tt">application/x-www-form-urlencoded</literal></para></listitem>
		</itemizedlist>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-track</option> <option>paramKeyList</option></term>
	    <listitem>
	      <para>
		Track a parameter: register it as &quot;static&quot;
		for the generation of URLs with web::cmdurl. Thus,
		each parameter with the key in
		<option>paramKeyList</option> will be repeated in
		every URL generated with web::cmdurl. See the
		documentation of <command>web::cmdurl</command> for
		details.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-hook</option> <option>code</option></term>
	    <listitem>
	      <para>
		Causes web::dispatch to eval <option>code</option>
		just before the command (from any source) is
		evaluated. When <option>code</option> is evaluated,
		the full request information has been parsed.  That
		is, web::param, web::formvar etc. will have up-to-date
		information when <option>code</option> is evaluated.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<emphasis>Note</emphasis> that, if no command is passed to
	web::dispatch either in the querystring or with the
	<option>-cmd</option> option, web::dispatch will call the
	command &quot;default&quot;.

      </para>
    </section>
    <section id="Examples4">
      <title>Examples</title>
      <para>

	<programlisting>
	  % set tst {puts &quot;On the hook&quot;}
	  puts &quot;On the hook&quot;
	  % web::command acmd {puts &quot;this is acmd&quot;}
	  % web::dispatch -cmd acmd -querystring &quot;&quot; -postdata &quot;&quot;
	  this is acmd
	  % web::dispatch -cmd acmd -querystring &quot;&quot; -postdata &quot;&quot; -hook $tst
	  On the hook
	  this is acmd
	  %
	</programlisting>

      </para>
    </section>
    <section id="session_management">
      <title>Session management</title>
      <para>
	Webshell session management consits of two parts:
	<itemizedlist>
	  <listitem><para>session id tracking</para></listitem>
	  <listitem><para>session context management</para></listitem>
	</itemizedlist>
      </para>
      <para>
	Session context managers are described in detail below
	(<command>web::filecontext</command>,
	<command>web::cookiecontext</command>). Session id tracking is
	managed by <command>web::dispatch -track</command>. The two
	parts are connected with the <option>-attachto</option> option
	of the session context manager.  The control is as follows:
      </para>
      <para>
	<itemizedlist>
	  <listitem>
	    <para>
	      A user uses the Webshell script for the first
	      time.<command>web::dispatch -track</command> will not
	      see any session id, and, consequently, not set the
	      static parameter <literal remap="tt">id</literal>.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Within the application, the session is initialized using
	      <command>mgr::init</command>. <command>init</command>
	      will find no static parameter <literal
		remap="tt">id</literal> (which has been specified at
	      creation time of the session manager using the
	      <option>-attachto</option> option).  Now, it tries to
	      create a new session id. This will be possible if a
	      session id generator has been specified when the manager
	      was created using the <option>-idgen</option> option.
	      From now, on the session id will be a static parameter,
	      and will therefore be present in every URL generated
	      with <command>web::cmdurl</command>
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      The next time the user visits the Webshell application
	      using one of these URLs,
	      <command>web::dispatch</command> will detect the
	      session id, and <command>mgr::init</command> will directly load
	      the corresponding session context without generating a
	      new session id.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </section>
    <section id="Examples5">
      <title>Examples</title>
      <para>

	See <ulink
	  url="http://websh.com/examples.html">http://websh.com/examples.html</ulink>
	for several sample application demonstrating Webshell's
	session management facilities.

      </para>
    </section>
  </section>
  <section id="request_data_handling">
    <title>Request data handling</title>
    <section id="web::request">
      <title>web::request</title>
      <para>
	Syntax:
	<cmdsynopsis>
	  <command>web::request</command>
	  <arg choice="opt">options</arg>
	  <arg choice="opt">key</arg>
	  <arg choice="opt">value</arg>
	  <command>web::request</command>
	  <arg choice="opt">key</arg>
	  <arg choice="opt">default</arg>
	</cmdsynopsis>
      </para>
      <para>
	Options are: <option>-count</option>, <option>-set</option>,
        <option>-lappend</option>, <option>-names</option>,
        <option>-unset</option>, <option>-reset</option> and
        <option>-channel</option> fixme: gibt es -channel noch?
      </para>
      <para>

	web::request is an accessor to CGI related information.

	<variablelist>
	  <varlistentry>
	    <term><command>web::request</command></term>
	    <listitem>
	      <para>
		returns a list of all known keys
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::request</command> <option>key</option>
	      <optional><option>default</option></optional></term>
	    <listitem>
	      <para>
		returns the value for <option>key</option>. Can be a
		list. In case that <option>key</option> does not
		exist, return <option>default</option>, if it is
		given, or an empty string.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::request</command>
	      <option>-count</option> <option>key</option></term>
	    <listitem>
	      <para>
		returns number of items in list for
		<option>key</option>; returns 0 if
		<option>key</option> does not exist
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::request</command>
	      <option>-set</option> <option>key</option></term>
	    <listitem>
	      <para>
		does the same as 'web::request <option>key</option>'
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::request</command>
	      <option>-set</option> <option>key</option>
	      <option>value</option>
	      <optional><option>value</option></optional>
	      <optional><option>...</option></optional></term>
	    <listitem>
	      <para>
		adds the parameter <option>key</option> to the
		web::request data.  Any existing parameters with
		<option>key</option> are overwritten
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::request</command>
	      <option>-lappend</option> <option>key</option>
	      <option>value</option>
	      <optional><option>value</option></optional>
	      <optional><option>...</option></optional></term>
	    <listitem>
	      <para>
		append parameters with the same <option>key</option>
		to the web::request data. In this case the existing
		<option>value</option> is not overwritten
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::request</command>
	      <option>-unset</option></term>
	    <listitem>
	      <para>
		deletes all parameters from the web::request data
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::request</command>
	      <option>-unset</option> <option>key</option></term>
	    <listitem>
	      <para>
		deletes a parameter from the web::request data
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::request</command>
	      <option>-reset</option></term>
	    <listitem>
	      <para>
		deletes all parameters from the web::request data
		(like 'web::request -unset'), removes all static
		parameters (like 'web::cmdurlcfg -unset'), all form
		variables (like 'web::formvar -unset'), all query
		string parameters (like 'web::param -unset'), and all
		temporary files created by HTTP form upload
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::request</command>
	      <option>-channel</option></term>
	    <listitem>
	      <para>
		fixme: what does it do?
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

      </para>
    </section>
    <section id="web::param">
      <title>web::param</title>
      <para>

	Syntax:
	<cmdsynopsis>
	  <command>web::param</command>
	  <arg choice="opt">options</arg>
	  <arg choice="opt">key</arg>
	  <arg choice="opt">value</arg>
	  <arg choice="opt">...</arg>
	</cmdsynopsis>

	Options are: <option>-count</option>, <option>-set</option>,
	<option>-lappend</option>, <option>-names</option>, and
	<option>-unset</option>

      </para>
      <para>
	web::param is an accessor to state information from the
	querystring.  Suppose the querystring is &quot;lang=EN&quot;.
	After web::dispatch has parsed the querystring,
	<command>web::param</command> <option>lang</option> will
	report <literal remap="tt">EN</literal>.  Additionaly,
	web::param can manage this data and add, append, and delete
	parameters as needed.

	<variablelist>
	  <varlistentry>
	    <term><command>web::param</command> <option>-names</option></term>
	    <listitem>
	      <para>
		returns a list of all known keys
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::param</command> <option>key</option>
	      <optional><option>default</option></optional></term>
	    <listitem>
	      <para>
		returns the value for <option>key</option>. Can be a
		list. In case that <option>key</option> does not
		exist, return <option>default</option>, if it is
		given, or an empty string.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::param</command>
	      <option>-count</option> <option>key</option></term>
	    <listitem>
	      <para>
		returns number of items in list of
		<option>key</option>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::param</command> <option>-set</option>
	      <option>key</option></term>
	    <listitem>
	      <para>
		does the same as '<command>web::param</command> <option>key</option>'
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::param</command> <option>-set</option>
	      <option>key</option> <option>value</option>
	      <optional><option>value</option></optional>
	      <optional><option>...</option></optional></term>
	    <listitem>
	      <para>
		add the parameter <option>key</option> to the
		web::param data.  Any existing parameters with
		<option>key</option> are overwritten
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::param</command>
	      <option>-lappend</option> <option>key</option>
	      <option>value</option>
	      <optional><option>value</option></optional>
	      <optional><option>...</option></optional></term>
	    <listitem>
	      <para>
		append parameters with the same <option>key</option>
		to the web::param data.  In this case the existing
		<option>value</option> is not overwritten
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::param</command> <option>-unset</option></term>
	    <listitem>
	      <para>
		deletes all parameters from the web::param data
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::param</command>
	      <option>-unset</option> <option>key</option></term>
	    <listitem>
	      <para>
		delete a parameter from the web::param data
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

      </para>
    </section>
    <section id="web::formvar">
      <title>web::formvar</title>
      <para>
	Syntax:
	<cmdsynopsis>
	  <command>web::formvar</command>
	  <arg choice="opt">options</arg>
	  <arg choice="opt">key</arg>
	  <arg choice="opt">value</arg>
	</cmdsynopsis>

	Exactly like <command>web::param</command>

	<command>web::formvar</command> is an accessor to HTML FORM
	data.  After <command>web::dispatch</command> has parsed the
	POST data, you can access all form fields using
	<command>web::formvar</command>.

      </para>
    </section>
    <section id="Examples6">
      <title>Examples</title>
      <para>

	<programlisting>
	  % web::request CONTENT_LENGTH
	  % web::dispatch -querystring &quot;cmd=default&amp;t=100&quot; -postdata &quot;&quot; -cmd &quot;&quot;
	  % web::param -names
	  t cmd
	  % web::param cmd
	  default
	  % web::param -set k v
	  v
	  % web::param -names
	  t cmd k
	  %
	</programlisting>

      </para>
    </section>
  </section>
  <section id="response_data_handling">
    <title>Response data handling</title>
    <para>
      Webshell can send output to any Tcl channel and to global
      variables (<command>web::put</command>). Optionally,
      data is scanned for Tcl code before it is output to a channel
      (<command>web::putx</command>). Webshell manages
      <emphasis>response objects</emphasis> that are related to Tcl
      channels and are identified using the name of the corresponding
      Tcl channel. Configuration with <command>web::response</command>.
    </para>
    <section id="web::response">
      <title>web::response</title>
      <para>

	Syntax:

	<cmdsynopsis>
	  <command>web::response</command>
	  <command>web::response</command>
	  <arg choice="opt">option</arg>
	  <command>web::response</command>
	  <arg choice="opt">subcommand</arg>
	  <arg>args</arg>
	</cmdsynopsis>

	Subcommands are <command>-select</command>,
	<option>-set</option>, <option>-lappend</option>,
	<option>-names</option>, <option>-count</option>,
	<option>-unset</option>, <option>-reset</option>, and
	<option>-resetall</option> Options are
	<option>-sendheader</option>, <option>-httpresponse</option>,
	and <option>-bytessent</option>.</para><para>

	Selects the default response object and sets and accesses
	properties of the response object, and returns the name of the
	response object.

      </para><para>
	<command>web::response</command>
	<option>-select</option>
	<option>channelName</option>

	selects <option>channelName</option> as new response
	object. If the <option>channelName</option> is prepended by a
	#, it refers to a global variable named
	<option>channelName</option>.

	<variablelist>
	  <varlistentry>
	    <term><command>web::response</command></term>
	    <listitem>
	      <para>
		returns the name of the currently selected response object
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::response</command>
	      <option>-select</option>
	      <optional>#</optional><option>channel</option></term>
	    <listitem>
	      <para>
		makes <option>channel</option> the new default
		response object and returns the old default response
		object
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::response</command>
	      <option>-set</option> <option>key</option>
	      <optional><option>value</option></optional></term>
	    <listitem>
	      <para>
		sets property <option>key</option> to
		<option>value</option>, or returns current value if
		<option>value</option> is omitted.  The
		<option>keys</option> are names of HTTP header fields
		(do not include ':' at the end of the header field
		name) and <option>value</option> the corresponding
		value of the field (like Content-Type) and their
		values (like text/html).</para><para>
		Example:</para><para> <literal
		  remap="tt">web::response -set Status 200</literal>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::response</command>
	      <option>-names</option></term>
	    <listitem>
	      <para>
		returns the list of known keys
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::response</command>
	      <option>-count</option> <option>key</option></term>
	    <listitem>
	      <para>
		returns number of items in list of <option>key</option>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::response</command>
	      <option>-unset</option>
	      <optional><option>key</option></optional></term>
	    <listitem>
	      <para>
		delete the value of <option>key</option>, if
		<option>key</option> is given, or all keys.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::response</command>
	      <option>-sendheader</option>
	      <optional><option>boolean</option></optional></term>
	    <listitem>
	      <para>
		Sets the sendheader flag which indicates and controls
		whether the HTTP headers have been or should be sent.
		It is initially set to 1 and set to 0 after the first
		call of <command>web::put</command> or
		<command>web::putx</command>. If
		<option>boolean</option> is omitted, returns the
		current value.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::response</command>
	      <option>-httpresponse</option>
	      <optional><option>value</option></optional></term>
	    <listitem>
	      <para>
		Sets the HTTP response like &quot;HTTP/1.0 200
		OK&quot; for the given (or default) channel. If no
		<option>value</option> given, returns the the current
		HTTP response set. In the case of the Apache module
		mod_websh, Apache replaces the protocol
		&quot;HTTP/??&quot; in the reponse to
		&quot;HTTP/1.1&quot;
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::response</command>
	      <option>-bytessent</option></term>
	    <listitem>
	      <para>
		returns the number of bytes that have already been sent to this
		channel.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::response</command>
	      <option>-reset</option></term>
	    <listitem>
	      <para>
		resets the 'sendheader' flag for the channel to true,
		the HTTP response to the default &quot;HTTP/?? 200
		OK&quot;, removes any HTTP headers set, and resets the
		names of the query string parameters for the timestamp
		and the command to their default values (&quot;t&quot;
		and &quot;cmd&quot;, respectively)
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::response</command>
	      <option>-resetall</option></term>
	    <listitem>
	      <para>
		performs a 'web::response -reset' on all registered channels
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

      </para>
    </section>
    <section id="web::put">
      <title>web::put</title>
      <para>
	Syntax:
	<cmdsynopsis>
	  <command>web::put</command>
	  <arg choice="opt">channel</arg>
	  <arg choice="opt">text</arg>
	</cmdsynopsis>
	Send output to a Tcl channel.  No newline is added to output.

      </para>
    </section>
    <section id="web::putx">
      <title>web::putx</title>
      <para>

	<cmdsynopsis>
	  <command>web::putx</command>
	  <arg choice="opt">channel</arg>
	  <arg choice="opt">text</arg>
	</cmdsynopsis>

	Writes <option>text</option> to the specified channel. Code in
	curly brackets is eval'd, unless the brackets are escaped by
	&quot;\&quot;. These markup characters '{...}' can be changed
	to '&lt;% ... %&gt;' with 'web::config putxmarkup tag'.

      </para>
    </section>
    <section id="web::putxfile">
      <title>web::putxfile</title>
      <para>

	<cmdsynopsis>
	  <command>web::putxfile</command>
	??#<optional><option>channel</option></optional>
	<option>file</option>
	<optional><option>msg</option></optional>
      </cmdsynopsis>

	As web::putx, but takes input from a file.

	Returns 0 on success, 1 otherwise. If an error occurs, an
	error message is written to <option>msg</option>. If only two
	arguments are passed, then <option>channel</option> takes
	precedence.

      </para>
    </section>
    <section id="Examples7">
      <title>Examples</title>
      <para>
	<programlisting>
	  % web::response
	  stdout
	  % web::response -select stderr
	  stdout
	  % web::response
	  stderr
	  % web::response -sendheader
	  1
	  % web::response -names
	  Content-Type Generator
	  % web::response Content-Type
	  text/html
	  % web::response -bytessent
	  0
	  % web::response -set Set-Cookie &quot;my cookie that contains data&quot;
	  % web::put &quot;Hello, world\n&quot;
	  Content-Type: text/html
	  Set-Cookie: my cookie that contains data
	  Generator: websh3.00 (c) Netcetera AG, http://netcetera.ch

	  Hello, world
	  %
	</programlisting>

      </para>
    </section>
  </section>
  <section id="logging">
    <title>Logging</title>
    <para>
      Logging consists of two parts. <command>web::log</command>
      issues a logging message, while
      <command>web::logfilter</command> and
      <command>web::logdest</command> determine where to send a
      message. Webshell uses a two-step filtering. First, Webshell
      determines whether it should handle a message, or not, using the
      filters configured with &quot;web::logfilter&quot;. Then,
      Webshell determines which message is to be sent where, using the
      filters configured with <command>web::logdest</command>.
    </para>
    <para>
      A filter consists of a tag and a level, separated by a
      &quot;.&quot;. The tag is free text. Typically, it is the name
      of the application, say &quot;foo&quot;. Example:
      &quot;ws3.debug&quot;. Levels are, in order:
      <itemizedlist>
	<listitem><para>alert</para></listitem>
	<listitem><para>error</para></listitem>
	<listitem><para>warning</para></listitem>
	<listitem><para>info</para></listitem>
	<listitem><para>debug</para></listitem>
      </itemizedlist>
    </para>
    <section id="web::logdest">
      <title>web::logdest</title>
      <para>

	web::logdest add -maxchar 25 -format &quot;%x %X \$l \$m&quot; *.-debug command logTest

	<cmdsynopsis>
	  <command>web::logdest</command> <arg>subcommand</arg> <arg
								  choice="opt">options</arg> <arg>level</arg>
	  <arg>plugin</arg>
	</cmdsynopsis>

	Subcommands are: <option>add</option>,
	<option>delete</option>, and <option>names</option>.  Options
	are: <option>-maxchar</option>, and
	<option>-format</option>.
      </para>
      <para>

	Known plug-ins are: <option>file</option>,
	<option>syslog</option>, <option>command</option>,
	<option>channel</option>, and
	<option>apache</option>. <emphasis>Note</emphasis>: the
	plugins may have indiviudal options
	(<option>-unbuffered</option>), see documentation below.

	The format string consits of format specifications for
	<function>fprintf()</function> plus: <literal
	  remap="tt">p</literal> (process id), <literal
	  remap="tt">t</literal> (thread id), <literal
	  remap="tt">n</literal> (log level), <literal
	  remap="tt">f</literal> (log type), and <literal
	  remap="tt">m</literal> (the message).

      </para>
    </section>
    <section id="web::logfilter">
      <title>web::logfilter</title>
      <para>

	Syntax:
	<cmdsynopsis>
	  <command>web::logfilter</command>
	  <arg>subcommand</arg>
	  <arg>args</arg>
	</cmdsynopsis>

	Subcommands are: <option>add</option>,
	<option>delete</option>, and <option>names</option>.
      </para>
      <para>
	Add a filter to the list.
	<variablelist>
	  <varlistentry>
	    <term><command>web::logfilter</command>
	      <option>add</option> <option>level</option></term>
	    <listitem>
	      <para>
		add a level to the list
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::logfilter</command>
	      <option>delete</option>
	      <optional><option>name</option></optional></term>
	    <listitem>
	      <para>
		remove a <option>name</option> from list, or remove all
		filters if <option>name</option> is omitted.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::logfilter</command>
	      <option>names</option></term>
	    <listitem>
	      <para>
		list all filters that have been set
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

      </para>
    </section>
    <section id="web::log">
      <title>web::log</title>
      <para>

	<cmdsynopsis>
	  <command>web::log</command> <arg>level</arg>
	  <arg>msg</arg>
	</cmdsynopsis>

	Issue a log message.  It is possible, should the user so
	desire, to have the <command>web::log</command> run
	<command>subst</command> on its arguments.  This behaviour is
	turned off by default, and can be turned on by doing:
	<programlisting>web::config logsubst 1</programlisting>.
      </para>
    </section>
    <section id="log_plug-ins">
      <title>Log plug-ins</title>
      <section id="file">
	<title>File</title>
	<para>
	  Syntax:
	  <cmdsynopsis>
	    <command>web::logdest</command>
	    <arg choice="plain">add</arg>
	    <arg>destination.-level</arg>
	    <arg>file</arg>
	    <arg choice="opt">options</arg>
	    <arg>filename</arg>
	  </cmdsynopsis>
	  Option is: <option>-unbuffered</option>
	</para>
      </section>
      <section id="syslog">
	<title>Syslog</title>
	<para>
	  Syntax:
	  <cmdsynopsis>
	    <command>web::logdest</command>
	    <arg choice="plain">add</arg>
	    <arg>*.-debug</arg>
	    <arg>syslog</arg>
	    <arg choice="opt">level</arg>
	  </cmdsynopsis>

	  See the man page for syslog for levels on your system. Typical: 10.

	</para>
      </section>
      <section id="command">
	<title>Command</title>
	<para>
	  Syntax:
	  <cmdsynopsis>
	    <command>web::logdest</command>
	    <arg choice="plain">add</arg>
	    <arg>*.-debug</arg>
	    <arg choice="plain">command</arg>
	    <arg>cmdName</arg>
	  </cmdsynopsis>
	</para>
      </section>
      <section id="channel">
	<title>Channel</title>
	<para>

	  Syntax:
	  <cmdsynopsis>
	    <command>web::logdest</command>
	    <arg choice="plain">add</arg>
	    <arg>*.-debug</arg>
	    <arg choice="plain">channel</arg>
	    <arg choice="opt">options</arg>
	    <arg>channel</arg>
	  </cmdsynopsis>
	  Option is: <option>-unbuffered</option>
	</para>
      </section>
      <section id="apache">
	<title>Apache</title>
	Syntax:
	<cmdsynopsis>
	  <command>web::logdest</command>
	  <arg choice="plain">add</arg>
	  <arg>*.-debug</arg>
	  <arg choice="plain">apache</arg>
	</cmdsynopsis>
	<para>
	  Available in mod_websh only.

	</para>
      </section>
    </section>
    <section id="Examples8">
      <title>Examples</title>
      <para>

	<programlisting>
	  % web::logfilter add *.-debug
	  logfilter0
	  % web::logdest add *.-debug channel stdout
	  logdest0
	  % web::log info {Webshell is cool}
	  03/01/00 00:00:00 [111] user.info: Webshell is cool
	  % web::logdest delete logdest0
	  % web::logdest add -format &quot;--&gt; \$m\n&quot; *.-debug channel stdout
	  logdest1
	  % web::log info {Webshell is cool}
	  --&gt; Webshell is cool
	  % web::logdest delete logdest1
	  % web::logdest add -maxchar 5 *.-debug channel stdout
	  % web::log info {Webshell is cool}
	  03/01/00 00:00:00 [111] user.info: Websh
	  %
	</programlisting>

      </para>
    </section>
  </section>
  <section id="context_handling">
    <title>Context handling</title>
    <section id="web::context">
      <title>web::context</title>
      <para>
	Creation
	<cmdsynopsis>
	  <command>web::context</command> <arg>name</arg>
	</cmdsynopsis>
	Creates a namespace <option>name</option> with the following
	commands:

	<cmdsynopsis>
	  <command><varname>name</varname>::subcommand</command>
	  <arg>args</arg>
	</cmdsynopsis>

	Subcommands are: <option>cset</option>,
	<option>cappend</option>, <option>clappend</option>,
	<option>cget</option>, <option>cexists</option>,
	<option>cunset</option>, <option>carray</option>,
	<option>cnames</option>, and <option>dump</option>.

	Manages data of the context. The subcommands behave like the
	Tcl commands with similar names.

	<variablelist>
	  <varlistentry>
	    <term><command><varname>name</varname>::cset</command>
	      <option>key</option> <option>value</option></term>
	    <listitem>
	      <para>
		store <option>value</option>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::cappend</command>
	      <option>key</option> <option>value</option>
	      <optional><option>value</option></optional>
	      <optional><option>...</option></optional></term>
	    <listitem>
	      <para>
		append <option>value</option> to existing value for
		<option>key</option>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::clappend</command>
	      <option>key</option> <option>value</option>
	      <optional><option>value</option></optional>
	      <optional><option>...</option></optional></term>
	    <listitem>
	      <para>
		append <option>value</option> to existing list of
		values for <option>key</option>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::cget</command>
	      <option>key</option>
	      <optional><option>default</option></optional></term>
	    <listitem>
	      <para>
		access the value for key <option>key</option>, or
		return <option>default</option> if
		<option>key</option> does not exist in the context. If
		<option>default</option> is omitted, an empty string
		is returned if <option>key</option> is unknown.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::cexists</command>
	      <option>key</option></term>
	    <listitem>
	      <para>
		returns true (1) if <option>key</option> exists in
		context, false (0) otherwise.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::cunset</command>
	      <option>key</option></term>
	    <listitem>
	      <para>
		remove <option>key</option> from context
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::carray</command>
	      <option>option</option> <option>key</option>
	      <option>arg</option></term>
	    <listitem>
	      <para>
		array manipulation as known from the Tcl command
		<emphasis>array</emphasis>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::cnames</command>
	      <optional><option>pattern</option></optional></term>
	    <listitem>
	      <para>
		lists existing keys of context matching
		<option>pattern</option>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::dump</command></term>
	    <listitem>
	      <para>
		serialize context
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Example:
	<programlisting>
	  % web::context sc
	  % sc::cset lang FR
	  FR
	  % # ... some code ...
	  % set lang [sc::cget lang EN]
	  FR
	  %
	</programlisting>

      </para>
    </section>
    <section id="web::filecontext">
      <title>web::filecontext</title>
      <para>

	Creation:
	<cmdsynopsis>
	  <command>web::filecontext</command>
	  <arg>name</arg>
	  <arg choice="opt">options</arg>
	</cmdsynopsis>

	Options are: <option>-perm</option>, <option>-path</option>,
	<option>-crypt</option>, <option>-idgen</option>, and
	<option>-attachto</option>.

	Creates a namespace <option>name</option> to manage file-based
	context data:

	Syntax:
	<cmdsynopsis>
	  <command><varname>name</varname>::subcommand</command>
	  <arg>args</arg>
	</cmdsynopsis>

	Subcommands are: <option>cset</option>,
	<option>cappend</option>, <option>clappend</option>,
	<option>cget</option>, <option>cexists</option>,
	<option>cunset</option>, <option>carray</option>,
	<option>cnames</option>, <option>init</option>,
	<option>new</option>, <option>commit</option>,
	<option>invalidate</option>, and <option>id</option>.

	Manages file-based context data. The subcommands have their
	familiar behaviour of the Tcl commands with similar
	names. Please refer to the section <link
	  linkend="context_handling">context management</link> for a
	description of the commands <option>cset</option>,
	<option>cappend</option>, <option>clappend</option>,
	<option>cget</option>, <option>cexists</option>,
	<option>cunset</option>, <option>carray</option>, and
	<option>cnames</option>.

	<variablelist>
	  <varlistentry>
	    <term>
	      <command><varname>name</varname>::init</command>
	      <optional><option>id</option></optional>
	    </term>
	    <listitem>
	      <para>
		load an existing session context with id
		<option>id</option>, or create a new one, if
		possible. Automation depends on the settings of the
		actual context manager settings, see
		below.</para><para> If you specify an
		<option>id</option>, you must decide when to create a
		new file and when to use the old one, if any, by
		yourself.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::new</command>
	      <optional><option>id</option></optional></term>
	    <listitem>
	      <para>
		create a new session context. Automation depends on
		the settings of the actual context manager settings,
		see below.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::commit</command></term>
	    <listitem>
	      <para>
		make session context persistent
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::id</command></term>
	    <listitem>
	      <para>
		return id of session
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::invalidate</command></term>
	    <listitem>
	      <para>
		delete session in memory and on file system
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Options:
	<cmdsynopsis>
	  <command>web::filecontext</command>
	  <arg>name</arg>
	  <arg>-perm</arg>
	  <arg>perm</arg>
	</cmdsynopsis>

	set the file permissions of the session context files
	<option>perm</option> is an unix-like octal value like 0644.

	<variablelist>
	  <varlistentry>
	    <term><command>web::filecontext</command>
	      <option>name</option> <option>-path</option>
	      <option>path</option>
	    </term>
	    <listitem>
	      <para>
		specify where to store session context files and how
		to name them. Suppose that the session id is 99.
		<emphasis>-path [file join .. data s%d.dat]</emphasis>
		would then cause filecontext to save the session
		context as <literal
		  remap="tt">../data/s99.dat</literal>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::filecontext</command>
	      <option>name</option> <option>-crypt</option>
	      <option>boolean</option></term>
	    <listitem>
	      <para>
		Flag to turn crypting of session context on and off.
		Default is on.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::filecontext</command>
	      <option>name</option> <option>-idgen</option>
	      <option>idgen</option></term>
	    <listitem>
	      <para>
		Sets command <option>idgen</option> to find a new
		session id. See doc of
		<command>web::filecounter</command> below for an
		implementation provided with webshell.
	      </para>
	      <para>
		<option>idgen</option> is used in case that no
		<option>id</option> argument has been passed to
		<option>init</option> or <option>new</option>.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::filecontext</command>
	      <option>name</option> <option>-attachto</option>
	      <option>idparam</option>
	    </term>
	    <listitem>
	      <para>
		the next using the querystring (this is one reason why
		the querystring is encrypted). After web::dispatch has
		parsed the querystring, web::param will report the
		current session id, if any. <emphasis>Note</emphasis>
		that you can maintain several sessions in parallel,
		and attach every session to its own
		<option>idparam</option>.
	      </para>
	      <para>
		Using <emphasis>web::dispatch -track</emphasis>
		further automates the passing of session ids from
		request to request.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<emphasis>Note:</emphasis> Whenever you create a new
	file-based context, the context is initialized and you loose
	whatever information that you might have stored in the context
	before you initialized it as a file-based session context.

      </para>
    </section>
    <section id="web::cookiecontext">
      <title>web::cookiecontext</title>
      <para>

	Creation:

	<cmdsynopsis>
	  <command>web::cookiecontext</command> <arg>name</arg> <arg
								  choice="opt">options</arg>
	</cmdsynopsis>

	Options are: <option>-expires</option>,
	<option>-path</option>, <option>-domain</option>,
	<option>-secure</option>, <option>-crypt</option>, and
	<option>-channel</option>.

	Creates a namespace <option>name</option> to manage
	cookie-based context data:

	<variablelist>
	  <varlistentry>
	    <term>Syntax</term>
	    <listitem>
	      <para>
		<command><varname>name</varname>::subcommand</command>
		<option>args</option></para>
	      <para>
		Subcommands are: <option>cset</option>,
		<option>cappend</option>, <option>clappend</option>,
		<option>cget</option>, <option>cexists</option>,
		<option>cunset</option>, <option>carray</option>,
		<option>cnames</option>, <option>init</option>,
		<option>new</option>, <option>commit</option>,
		<option>invalidate</option>, and <option>id</option>.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<variablelist>
	  <varlistentry>
	    <term><command><varname>name</varname>::init</command>
	      <optional><option>id</option></optional></term>
	    <listitem>
	      <para>
		load an existing session context (cookie must have
		been sent by the client).
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::new</command>
	      <optional><option>id</option></optional></term>
	    <listitem>
	      <para>
		create a new session context.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::commit</command></term>
	    <listitem>
	      <para>
		send a cookie
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::id</command></term>
	    <listitem>
	      <para>
		return id of session
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command><varname>name</varname>::invalidate</command></term>
	    <listitem>
	      <para>
		delete session in memory and on client side
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Options:

	<variablelist>
	  <varlistentry>
	    <term><command>web::cookiecontext</command>
	      <option>name</option> <option>-expires</option>
	      <option>time</option></term>
	    <listitem>
	      <para>
		set the expiration date of the cookie. Possible values
		for <option>time</option> are <emphasis>day</emphasis>
		(lifetime: one day), <emphasis>week</emphasis>,
		<emphasis>today</emphasis>,
		<emphasis>seconds</emphasis> (time in seconds since
		1-1-1970) or <emphasis>date-string</emphasis>.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::cookiecontext</command>
	      <option>name</option> <option>-path</option>
	      <option>path</option></term>
	    <listitem>
	      <para>
		set the <option>path</option> property of the cookie
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::cookiecontext</command>
	      <option>name</option> <option>-domain</option>
	      <option>domain</option></term>
	    <listitem>
	      <para>
		set the <option>domain</option> property of the cookie
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>web::cookiecontext <option>name</option>
	      <option>-secure</option> <option>boolean</option></term>
	    <listitem>
	      <para>
		set the <option>secure</option> property of the cookie
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::cookiecontext</command>
	      <option>name</option> <option>-crypt</option>
	      <option>boolean</option></term>
	    <listitem>
	      <para>
		Flag to turn crypting of cookie context on and off.
		Default is on.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><command>web::cookiecontext</command>
	      <option>name</option> <option>-channel</option>
	      <option>channelName</option></term>
	    <listitem>
	      <para>
		The response object to send the cookie to (see also
		<command>web::response</command>).
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Because cookies are client-based, in principle no id is
	needed. Webshell uses <option>id</option> to name the cookie,
	however, and the <command>new</command>,
	<command>init</command>, and <command>load</command> commands
	still require the <option>id</option> argument. (fixme: any
	changes?) Please note that property settings of a cookie
	context can only be changed <emphasis>before</emphasis>
	anything is output on the respective channel.

      </para>
    </section>
    <section id="web::filecounter">
      <title>web::filecounter</title>
      <para>

	This is a numeric sequence-number generator which stores its
	state in a file. Basic usage:

	<variablelist>
	  <varlistentry>
	    <term>Creation:</term>
	    <listitem>
	      <para>
		<command>web::filecounter</command>
		<option>name</option> <option>-filename</option>
		<option>fname</option>
		<optional><option>options</option></optional>
	      </para>
	      <para>
		Options are: <option>-min</option>,
		<option>-max</option>, <option>-seed</option>,
		<option>-incr</option>, <option>-mask</option>,
		<option>-wrap</option>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-filename</option>
	    <option>filename</option></term>
	    <listitem>
	      <para>
		uses <option>filename</option> to store the current
		value (no default)
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-min</option> <option>value</option></term>
	    <listitem>
	      <para>
		uses this value as a minimum at start and after wrap,
		if wrap is true (default is 0)
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-max</option> <option>value</option></term>
	    <listitem>
	      <para>
		uses this value as a maximum, if wrap is true (default is 2147483647)
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-seed</option> <option>value</option></term>
	    <listitem>
	      <para>
		if persistent file does not yet exists, use this value
		as a starting point (default is 0)
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-incr</option> <option>value</option></term>
	    <listitem>
	      <para>
		uses this value as an increment for each 'nextval'
		(default is 1)
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-perms</option>
	    <option>value</option></term>
	    <listitem>
	      <para>
		sets the permissions on the newly created files
		(default is 0644)
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-wrap</option>
	    <option>boolean</option></term>
	    <listitem>
	      <para>
		indicates whether this counter should wrap around its
		values (from min to max) (default is false)
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	After creation, a new command <option>name</option> is
	registered with the following two subcommands:

	<variablelist>
	  <varlistentry>
	    <term><option>name</option> nextval</term>
	    <listitem>
	      <para>
		return the next value
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>name</option> curval</term>
	    <listitem>
	      <para>
		return the current value, that is, the value that the
		last call to &quot;nextval&quot; reported (as opposed
		to the current value in the file)
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

      </para><para>
      </para>
    </section>
    <section id="Examples9">
      <title>Examples</title>
      <para>
	<programlisting>
	  % web::filecounter handleName -filename &quot;test.dat&quot;
	  handleName
	  % # from now on, use handleName &lt;curval|nextval|config&gt;
	  % handleName config
	  file test.dat handle handleName seed 0 min 0 max 2147483647 incr 1 wrap false curr {not valid}
	  % web::filecounter otherHandleName -filename &quot;othertest.dat&quot; -min 1 -max 10 -seed 1 -incr 2 -wrap 1
	  otherHandleName
	  % otherHandleName config
	  file othertest.dat handle otherHandleName seed 1 min 1 max 10 incr 2 wrap true curr {not valid}
	  %
	</programlisting>

      </para>
    </section>
  </section>
  <section id="file_handling_and_file_IO">
    <title>File handling and file I/O</title>
    <section id="web::include">
      <title>web::include</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		web_include <option>fileName</option> <optional><option>msg</option></optional>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	If the file <option>fileName</option> exists, it is sourced (must be a
	script). Otherwise if the library fileName+&quot;shared lib extension&quot;
	exists, it is loaded (must be a shared library). Returns 0 on success,
	1 otherwise. If an error occurs, an error message is written to <option>msg</option>.

      </para>
    </section>
    <section id="web::readfile">
      <title>web::readfile</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		web::readfile <option>file</option> <option>varName</option> <option>msg</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<option>file</option> is read and written to <option>varName</option>. Returns 0 on success, 1
	otherwise. If an error occurs, an error message is written to the
	variable <option>msg</option>.

      </para>
    </section>
    <section id="web::lockfile_and_web::unlockfile">
      <title>web::lockfile and web::unlockfile</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::lockfile</command> <option>fh</option></para><para>
		<command>web::unlockfile</command> <option>fh</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Interface to lockf(). lockf() works best on local filesystems.  Please
	read the documentation of lockf on your system to learn about the
	problems and limitations of file locking. Note that web::lockfile also
	performs a seek() and resets the file cursor to the beginning of the
	file.

	<emphasis>Note</emphasis> that the file needs to be open for writing.

      </para>
    </section>
    <section id="web::truncatefile">
      <title>web::truncatefile</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::truncatefile</command> <option>fh</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Interface to truncate(). Truncates a file based on the file handle,
	while Tcl's file commands are based on file names. This is used to
	truncate a file while holding the lock.

      </para>
    </section>
    <section id="Examples10">
      <title>Examples</title>
      <para>

	<programlisting>
	  set fh [open [web::tempfile] w]
	  web::lockfile $fh
	  puts $fh foo
	  web::unlockfile $fh
	  close $fh
	</programlisting>

      </para>
    </section>
  </section>
  <section id="data_encryption">
    <title>Data encryption</title>
    <para>
      Encrypt (<command>web::encrypt</command>) and decrypt
      (<command>web::decrypt</command>) data. By default,
      the built-in, weak encryption is used. encryption is extensible
      by plug-Ins.  The encryption module tries all plug-Ins from a
      list until the first plug-In was able to en-/decrypt the input.
      See <command>web::config</command> for the
      configuration of the plug-Ins to be used.
    </para>
    <section id="web::encrypt">
      <title>web::encrypt</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::encrypt</command> <option>data</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Returns encrypted data.

      </para>
    </section>
    <section id="web::decrypt">
      <title>web::decrypt</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::decrypt</command> <option>data</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Returns decrypted data.

	Examples:
	<programlisting>
	  % web::encrypt &quot;Hello, world!&quot;
	  XDIVAhkgkxRjcfA7UTwpD7
	  % web::decrypt [web::encrypt &quot;Hello, world!&quot;]
	  Hello, world!
	  %
	</programlisting>

      </para>
    </section>
    <section id="encryption_plug-in_D">
      <title>Encryption plug-in D</title>
      <para>

      </para>
    </section>
    <section id="web::encryptd">
      <title>web::encryptd</title>
      <para>

	By default, Webshell uses this plug-In for weak data encryption for
	encryption (<command>web::encryptd</command>) and decryption (<command>web::decryptd</command>).
	The encryption key is managed with <command>web::crpytdkey</command>.

      </para><para>
	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::encryptd</command> <option>data</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Returns encrypted data.

      </para>
    </section>
    <section id="web::decryptd">
      <title>web::decryptd</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::decryptd</command> <option>data</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Returns decrypted data.

      </para>
    </section>
    <section id="web::cryptdkey">
      <title>web::cryptdkey</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::cryptdkey</command> <optional><option>key</option></optional>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Sets the new key for encryption. If no argument is given, resets to
	the default key. This command does not return the currently active
	key, in difference to other configuration commands of Webshell.

	Commands:

	<variablelist>
	  <varlistentry>
	    <term>web::encryptd <option>message</option></term>
	    <listitem>
	      <para>
		encrypts <option>message</option>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>web::decryptd <option>message</option></term>
	    <listitem>
	      <para>
		decrypts <option>message</option>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>web::cryptdkey</option> <optional><option>key</option></optional></term>
	    <listitem>
	      <para>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

      </para>
    </section>
    <section id="encryption_plug-in_interface_">
      <title>Encryption plug-in interface</title>
      <para>
	<emphasis>For plug-in developers only</emphasis>
      </para>
      <para>
	The encryption plug-in is required to implement the interface
	described below:
	<itemizedlist>
	  <listitem>
	    <para>
	      web::yourencrypt accepts one argument web::yourencrypt
	      takes a string as input and generates a string which
	      must be URI compliant
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      web::yourdecrypt accepts one argument web::yourdecrypt
	      takes a string as input and returns a string
	    </para>
	  </listitem>
	  <listitem>
	    <para>symmetry: <emphasis>$in ==
		[web::yourdecrypt [web::yourencrypt
		$in]]</emphasis>
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      error messaging: <emphasis>TCL_OK</emphasis> for
	      success. <emphasis>TCL_ERROR</emphasis> for any error
	      during en-/decryption. <emphasis>TCL_CONTINUE</emphasis>
	      for unknown encryption type (pass on to next method)
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </section>
  </section>
  <section id="uri-html-_en-decoding">
    <title>Uri-/html- en-/decoding</title>
    <section id="web::htmlify">
      <title>web::htmlify</title>
      <para>
      </para>
    </section>
    <section id="web::dehtmlify">
      <title>web::dehtmlify</title>
      <para>
      </para>
    </section>
    <section id="web::uriencode">
      <title>web::uriencode</title>
      <para>
      </para>
    </section>
    <section id="web::uridecode">
      <title>web::uridecode</title>
      <para>

	<itemizedlist>
	  <listitem>
	    <para>
	      <command>web::htmlify</command> ?-options? <option>text</option>
	    </para>
	    <para>
	      Options is: <option>-numeric</option>.
	    </para>
	    <para>
	      Return HTML-compliant <option>text</option> with HTML encoded
	      entities in mnemonic form (e.g. &amp;auml;) or - with
	      option -numeric - numeric form (e.g. &amp;#228;)
	    </para>
	  </listitem>
	  <listitem>
	    <para><command>web::dehtmlify</command>	<option>text</option>
	    </para>
	    <para>
	      Remove all HTML-specifics of <option>text</option>
	    </para>
	  </listitem>
	  <listitem>
	    <para><command>web::uriencode</command>
	      <option>text</option>
	    </para>
	    <para>
	      Return URI-compliant <option>text</option>.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <command>web::uridecode</command> <option>text</option>
	    </para>
	    <para>Decode URI-compliant <option>text</option>.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </section>
    <section id="Examples11">
      <title>Examples</title>
      <para>
	<programlisting>
	  % web::htmlify &lt;
	  &amp;lt;
	  % web::htmlify -numeric &lt;
	  &amp;#60;
	  % web::dehtmlify &quot;&amp;lt; &amp;#60;&quot;
	  &lt; &lt;
	  % web::uriencode &quot;Hello, world!&quot;
	  Hello%2c+world%21
	  % web::uridecode &quot;Hello%2c+world%21&quot;
	  Hello, world!
	  %
	</programlisting>

      </para>
    </section>
  </section>
  <section id="inter-process_and_-system_communication">
    <title>Inter-process/-system communication</title>
    <para>
      Send to and receive from sockets.
    </para>
    <section id="web::send">
      <title>web::send</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::send</command> <option>channel</option> <option>cmdNr</option> <option>message</option> ??#<optional><option>flags</option></optional>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Send the command <option>cmdNr</option> and the message <option>message</option> to channel
	<option>channelName</option> using the flags <option>flags</option>. The command numbers are
	application specific. If #<option>flags</option> is used, flags is the numeric
	(integer) representation of the flags is to be set. If the # is
	omitted, <option>flags</option> is a list of symbolic flags. Currently, there is only
	one flag: &quot;multiple&quot; or &quot;noflush&quot; with the same meaning, 
	indicating that there is more to follow and no automatic flush on the
	channel should be done.

      </para>
    </section>
    <section id="web::recv">
      <title>web::recv</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::recv</command> <option>channel</option> <option>cmdVarName</option> <option>msgVarName</option> <option>flagVarName</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Receives a message from <option>channelName</option>. The other arguments are the
	names of the corresponding variables which will contain the message.
	The flags are returned numeric. (To handle these flags, use the
	web::msgflag function).

      </para>
    </section>
    <section id="web::msgflag">
      <title>web::msgflag</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::msgflag</command> <optional><option>flags</option></optional> <optional><option>testflags</option></optional>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Set or test flags.

	<variablelist>
	  <varlistentry>
	    <term>web::msgflag</term>
	    <listitem>
	      <para>
		returns a list of all known message flags
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>web::msgflag <option>flags</option></term>
	    <listitem>
	      <para>
		returns the integer representation of the flags listed in <option>flags</option> 
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>web::msgflag <option>flags</option> <option>testflags</option></term>
	    <listitem>
	      <para>
		returns 1, if the flags in <option>testflags</option> are set in <option>flags</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

      </para><para>
      </para>
    </section>
    <section id="Examples12">
      <title>Examples</title>
      <para>

      </para>
    </section>
  </section>
  <section id="Apache_module_specific_commands">
    <title>Apache module specific commands</title>
    <section id="web::initializer">
      <title>web::initializer</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::initializer</command> <option>code</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	This code is executed only when a new interpreter is created.  Note
	that the &quot;main&quot; Webshell script can <command>source</command> several modules which
	each call their initialization code.

      </para><para>
      </para>
    </section>
    <section id="web::finalizer">
      <title>web::finalizer</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::finalizer</command> <option>code</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Register code to be exectuted when the interpreter for this
	Webshell script is deleted. <command>web::dofinalize</command> will then call
	each <option>code</option> block that has been registered, starting with the
	most recently added <option>code</option>.

      </para>
    </section>
    <section id="web::dofinalize">
      <title>web::dofinalize</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::dofinalize</command>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Execute finalizer code that has been registerd using
	<command>web::finalizer</command>, starting with the most recently added <option>code</option>.

      </para>
    </section>
    <section id="web::maineval">
      <title>web::maineval</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::maineval</command> <option>code</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Execute code in the &quot;main&quot; interpreter of mod_websh.

      </para>
    </section>
    <section id="web::interpclasscfg">
      <title>web::interpclasscfg</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::interpclasscfg</command> <option>classid</option> property ?value?</para><para>
		Properties are: <option>maxrequests</option>, <option>maxttl</option>, <option>maxidletime</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Set or accesses properties of the interpreter class <option>classid</option>.

	<variablelist>
	  <varlistentry>
	    <term>web::interpclasscfg <option>classid</option> maxrequests <optional><option>value</option></optional></term>
	    <listitem>
	      <para>
		gets or sets the maximum number of requests interpreters of this
		class should handle. If <option>value</option> is 0, handle an unlimited number
		of requests. Default: 1
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>web::interpclasscfg <option>classid</option> maxttl <optional><option>value</option></optional></term>
	    <listitem>
	      <para>
		gets or sets the maximum number of seconds interpreters of this
		class should live. If <option>value</option> is 0, it lives forever. Default: 0
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>web::interpclasscfg <option>classid</option> maxidletime <optional><option>value</option></optional></term>
	    <listitem>
	      <para>
		gets or sets the maximum number of seconds interpreters of this
		class should live beeing idle. If <option>value</option> is 0, no idle timeout is
		assumed. Default: 0
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

      </para><para>
      </para>
    </section>
    <section id="web::interpcfg">
      <title>web::interpcfg</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		<command>web::interpcfg</command> ?property?
		?value?</para><para> Properties are:
		<option>numreq</option>, <option>retire</option>,
		<option>starttime</option>,
		<option>lastusedtime</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	Sets or accesses properties of the current interpreter.

	<variablelist>
	  <varlistentry>
	    <term>web::interpcfg </term>
	    <listitem>
	      <para>
		returns <option>classid</option> of current interpreter.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>web::interpcfg numreq</term>
	    <listitem>
	      <para>
		gets the number of requests handled by this interpreter
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>web::interpcfg retire <optional><option>boolean</option></optional></term>
	    <listitem>
	      <para>
		gets or sets the flag indicating this interpreter should be removed
		after handling the current request
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>web::interpcfg starttime</term>
	    <listitem>
	      <para>
		returns the time in seconds since the epoch, this interpreter was started
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>web::interpcfg lastusedtime</term>
	    <listitem>
	      <para>
		returns the time in seconds since the epoch, this interpreter was last used
		(starttime in case of first request).
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

      </para>
    </section>
  </section>
  <section id="misc_commands">
    <title>Miscellaneous commands</title>
    <section id="web::match">
      <title>web::match</title>
      <para>

	<variablelist>
	  <varlistentry>
	    <term>Syntax:</term>
	    <listitem>
	      <para>
		web::match <option>result</option>
		<option>listToBeSearched</option>
		<option>searchFor</option>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	In case <option>searchFor</option> exists in
	<option>listToBeSearched</option>, web::match returns
	<option>result</option>, otherwise an empty string.

      </para><para>
	For websh2 cracks:</para><para>

	wpp_isselected v1 v2 would now be: web::match
	&quot;selected&quot; v1 v2

      </para>
      <para>

	web::match treats v1 as a list. Thus, <emphasis>web::match
	  &quot;ok&quot; {tv dvd vcr} dvd</emphasis> will return
	<emphasis>ok</emphasis>.

      </para>
    </section>
    <section id="web::tempfile">
      <title>web::tempfile</title>
      <para>
	Returns a unique name of a temporary file. The maximum of
	guaranteed unique names per application is system dependent.
	This command just returns the name of a file. It is the
	programmers job to handle the file, for example to open
	it. Note that Webshell keeps an internal list of all file
	names generated with web::tempfile and will attempt to delete
	all files when the interpreter dies.
      </para>
    </section>
  </section>
</article>
